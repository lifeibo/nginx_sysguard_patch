diff --git a/auto/modules b/auto/modules
index 0992391..d76655b 100644
--- a/auto/modules
+++ b/auto/modules
@@ -340,6 +340,11 @@ if [ $HTTP_DEGRADATION = YES ]; then
     HTTP_SRCS="$HTTP_SRCS $HTTP_DEGRADATION_SRCS"
 fi
 
+if [ $HTTP_SYSGUARD = YES ]; then
+    HTTP_MODULES="$HTTP_MODULES $HTTP_SYSGUARD_MODULE"
+    HTTP_SRCS="$HTTP_SRCS $HTTP_SYSGUARD_SRCS"
+fi
+
 if [ $HTTP_FLV = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_FLV_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_FLV_SRCS"
diff --git a/auto/options b/auto/options
index a75bead..d3b18e8 100644
--- a/auto/options
+++ b/auto/options
@@ -216,6 +216,7 @@ do
         --with-http_random_index_module) HTTP_RANDOM_INDEX=YES      ;;
         --with-http_secure_link_module)  HTTP_SECURE_LINK=YES       ;;
         --with-http_degradation_module)  HTTP_DEGRADATION=YES       ;;
+        --with-http_sysguard_module)     HTTP_SYSGUARD=YES          ;;
 
         --without-http_charset_module)   HTTP_CHARSET=NO            ;;
         --without-http_gzip_module)      HTTP_GZIP=NO               ;;
@@ -364,6 +365,7 @@ cat << END
   --with-http_secure_link_module     enable ngx_http_secure_link_module
   --with-http_degradation_module     enable ngx_http_degradation_module
   --with-http_stub_status_module     enable ngx_http_stub_status_module
+  --with-http_sysguard_module        enable ngx_http_sysguard_module
 
   --without-http_charset_module      disable ngx_http_charset_module
   --without-http_gzip_module         disable ngx_http_gzip_module
diff --git a/auto/sources b/auto/sources
index cc19f8d..8d81fcb 100644
--- a/auto/sources
+++ b/auto/sources
@@ -154,6 +154,7 @@ UNIX_DEPS="$CORE_DEPS $EVENT_DEPS \
             src/os/unix/ngx_socket.h \
             src/os/unix/ngx_os.h \
             src/os/unix/ngx_user.h \
+            src/os/unix/ngx_sysinfo.h \
             src/os/unix/ngx_process_cycle.h"
 
 # add to UNIX_DEPS
@@ -185,6 +186,7 @@ UNIX_SRCS="$CORE_SRCS $EVENT_SRCS \
             src/os/unix/ngx_setproctitle.c \
             src/os/unix/ngx_posix_init.c \
             src/os/unix/ngx_user.c \
+            src/os/unix/ngx_sysinfo.c \
             src/os/unix/ngx_process_cycle.c"
 
 POSIX_DEPS=src/os/unix/ngx_posix_config.h
@@ -468,6 +470,10 @@ HTTP_DEGRADATION_MODULE=ngx_http_degradation_module
 HTTP_DEGRADATION_SRCS=src/http/modules/ngx_http_degradation_module.c
 
 
+HTTP_SYSGUARD_MODULE=ngx_http_sysguard_module
+HTTP_SYSGUARD_SRCS=src/http/modules/ngx_http_sysguard_module.c
+
+
 HTTP_FLV_MODULE=ngx_http_flv_module
 HTTP_FLV_SRCS=src/http/modules/ngx_http_flv_module.c
 
diff --git a/auto/unix b/auto/unix
index b0a0e4c..abb336c 100755
--- a/auto/unix
+++ b/auto/unix
@@ -276,6 +276,28 @@ if [ $ngx_found != yes ]; then
 fi
 
 
+ngx_feature="sysinfo()"
+ngx_feature_name="NGX_HAVE_SYSINFO"
+ngx_feature_run=no
+ngx_feature_incs="#include <sys/sysinfo.h>"
+ngx_feature_path=
+ngx_feature_libs=
+ngx_feature_test="struct sysinfo s;
+                  sysinfo(&s);"
+. auto/feature
+
+
+ngx_feature="getloadavg()"
+ngx_feature_name="NGX_HAVE_GETLOADAVG"
+ngx_feature_run=no
+ngx_feature_incs="#include <stdlib.h>"
+ngx_feature_path=
+ngx_feature_libs=
+ngx_feature_test="double loadavg[1];
+                  getloadavg(loadavg, 1);"
+. auto/feature
+
+
 ngx_feature="sched_yield()"
 ngx_feature_name="NGX_HAVE_SCHED_YIELD"
 ngx_feature_run=no
diff --git a/src/core/ngx_core.h b/src/core/ngx_core.h
index bccc603..19e4f5f 100644
--- a/src/core/ngx_core.h
+++ b/src/core/ngx_core.h
@@ -50,6 +50,7 @@ typedef void (*ngx_connection_handler_pt)(ngx_connection_t *c);
 #include <ngx_parse.h>
 #include <ngx_log.h>
 #include <ngx_alloc.h>
+#include <ngx_sysinfo.h>
 #include <ngx_palloc.h>
 #include <ngx_buf.h>
 #include <ngx_queue.h>
diff --git a/src/http/modules/ngx_http_sysguard_module.c b/src/http/modules/ngx_http_sysguard_module.c
new file mode 100644
index 0000000..8c11226
--- /dev/null
+++ b/src/http/modules/ngx_http_sysguard_module.c
@@ -0,0 +1,407 @@
+
+/*
+ * Copyright (C) 2010-2012 Alibaba Group Holding Limited
+ */
+
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+#include <ngx_http.h>
+
+
+typedef struct {
+    ngx_flag_t  enable;
+    ngx_int_t   load;
+    ngx_str_t   load_action;
+    ngx_int_t   swap;
+    ngx_str_t   swap_action;
+    time_t      interval;
+
+    ngx_uint_t  log_level;
+} ngx_http_sysguard_conf_t;
+
+
+static void *ngx_http_sysguard_create_conf(ngx_conf_t *cf);
+static char *ngx_http_sysguard_merge_conf(ngx_conf_t *cf, void *parent,
+    void *child);
+static char *ngx_http_sysguard_load(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf);
+static char *ngx_http_sysguard_mem(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf);
+static ngx_int_t ngx_http_sysguard_init(ngx_conf_t *cf);
+
+
+static ngx_conf_enum_t  ngx_http_sysguard_log_levels[] = {
+    { ngx_string("info"), NGX_LOG_INFO },
+    { ngx_string("notice"), NGX_LOG_NOTICE },
+    { ngx_string("warn"), NGX_LOG_WARN },
+    { ngx_string("error"), NGX_LOG_ERR },
+    { ngx_null_string, 0 }
+};
+
+
+static ngx_command_t  ngx_http_sysguard_commands[] = {
+
+    { ngx_string("sysguard"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_sysguard_conf_t, enable),
+      NULL },
+
+    { ngx_string("sysguard_load"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE12,
+      ngx_http_sysguard_load,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
+    { ngx_string("sysguard_mem"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE12,
+      ngx_http_sysguard_mem,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
+    { ngx_string("sysguard_interval"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_sec_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_sysguard_conf_t, interval),
+      NULL },
+
+    { ngx_string("sysguard_log_level"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_enum_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_sysguard_conf_t, log_level),
+      &ngx_http_sysguard_log_levels },
+
+      ngx_null_command
+};
+
+
+static ngx_http_module_t  ngx_http_sysguard_module_ctx = {
+    NULL,                                   /* preconfiguration */
+    ngx_http_sysguard_init,                 /* postconfiguration */
+
+    NULL,                                   /* create main configuration */
+    NULL,                                   /* init main configuration */
+
+    NULL,                                   /* create server configuration */
+    NULL,                                   /* merge server configuration */
+
+    ngx_http_sysguard_create_conf,          /* create location configuration */
+    ngx_http_sysguard_merge_conf            /* merge location configuration */
+};
+
+
+ngx_module_t  ngx_http_sysguard_module = {
+    NGX_MODULE_V1,
+    &ngx_http_sysguard_module_ctx,          /* module context */
+    ngx_http_sysguard_commands,             /* module directives */
+    NGX_HTTP_MODULE,                        /* module type */
+    NULL,                                   /* init master */
+    NULL,                                   /* init module */
+    NULL,                                   /* init process */
+    NULL,                                   /* init thread */
+    NULL,                                   /* exit thread */
+    NULL,                                   /* exit process */
+    NULL,                                   /* exit master */
+    NGX_MODULE_V1_PADDING
+};
+
+
+static time_t    ngx_http_sysguard_cached_exptime;
+static ngx_int_t ngx_http_sysguard_cached_load;
+static ngx_int_t ngx_http_sysguard_cached_swapstat;
+
+
+static ngx_int_t
+ngx_http_sysguard_update(ngx_http_request_t *r, time_t exptime)
+{
+    ngx_int_t       load, rc;
+    ngx_meminfo_t   m;
+
+    ngx_http_sysguard_cached_exptime = ngx_time() + exptime;
+
+    rc = ngx_getloadavg(&load, 1, r->connection->log);
+    if (rc == NGX_ERROR) {
+        goto error;
+    }
+
+    rc = ngx_getmeminfo(&m, r->connection->log);
+    if (rc == NGX_ERROR) {
+        goto error;
+    }
+
+    ngx_http_sysguard_cached_load = load;
+
+    ngx_http_sysguard_cached_swapstat = m.totalswap == 0
+        ? 0 : (m.totalswap- m.freeswap) * 100 / m.totalswap;
+
+    return NGX_OK;
+
+error:
+
+    ngx_http_sysguard_cached_load = 0;
+    ngx_http_sysguard_cached_swapstat = 0;
+
+    return NGX_ERROR;
+
+}
+
+
+static ngx_int_t
+ngx_http_sysguard_do_redirect(ngx_http_request_t *r, ngx_str_t *path)
+{
+    if (path->len == 0) {
+        return NGX_HTTP_SERVICE_UNAVAILABLE;
+    } else if (path->data[0] == '@') {
+        (void) ngx_http_named_location(r, path);
+    } else {
+        (void) ngx_http_internal_redirect(r, path, &r->args);
+    }
+
+    ngx_http_finalize_request(r, NGX_DONE);
+
+    return NGX_DONE;
+}
+
+
+static ngx_int_t
+ngx_http_sysguard_handler(ngx_http_request_t *r)
+{
+    ngx_http_sysguard_conf_t *glcf;
+
+    if (r->main->sysguard_set) {
+        return NGX_DECLINED;
+    }
+
+    glcf = ngx_http_get_module_loc_conf(r, ngx_http_sysguard_module);
+
+    if (!glcf->enable) {
+        return NGX_DECLINED;
+    }
+
+    r->main->sysguard_set = 1;
+
+    if (ngx_http_sysguard_cached_exptime < ngx_time()) {
+        ngx_http_sysguard_update(r, glcf->interval);
+    }
+
+    ngx_log_debug7(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                   "http sysguard handler %i %i %i %i %V %V %V",
+                   ngx_http_sysguard_cached_load,
+                   glcf->load,
+                   ngx_http_sysguard_cached_swapstat,
+                   glcf->swap,
+                   &r->uri,
+                   &glcf->load_action,
+                   &glcf->swap_action);
+
+    if (glcf->load >= 0
+        && ngx_http_sysguard_cached_load > glcf->load)
+    {
+        ngx_log_error(glcf->log_level, r->connection->log, 0,
+                      "sysguard load limited, current:%i conf:%i",
+                      ngx_http_sysguard_cached_load,
+                      glcf->load);
+
+        return ngx_http_sysguard_do_redirect(r, &glcf->load_action);
+    }
+
+    if (glcf->swap >= 0
+        && ngx_http_sysguard_cached_swapstat > glcf->swap)
+    {
+        ngx_log_error(glcf->log_level, r->connection->log, 0,
+                      "sysguard swap limited, current:%i conf:%i",
+                      ngx_http_sysguard_cached_swapstat,
+                      glcf->swap);
+
+        return ngx_http_sysguard_do_redirect(r, &glcf->swap_action);
+    }
+
+    return NGX_DECLINED;
+}
+
+
+static void *
+ngx_http_sysguard_create_conf(ngx_conf_t *cf)
+{
+    ngx_http_sysguard_conf_t  *conf;
+
+    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_sysguard_conf_t));
+    if (conf == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    /*
+     * set by ngx_pcalloc():
+     *
+     *     conf->load_action = {0, NULL};
+     *     conf->swap_action = {0, NULL};
+     */
+
+    conf->enable = NGX_CONF_UNSET;
+    conf->load = NGX_CONF_UNSET;
+    conf->swap = NGX_CONF_UNSET;
+    conf->interval = NGX_CONF_UNSET;
+    conf->log_level = NGX_CONF_UNSET_UINT;
+
+    return conf;
+}
+
+
+static char *
+ngx_http_sysguard_merge_conf(ngx_conf_t *cf, void *parent, void *child)
+{
+    ngx_http_sysguard_conf_t *prev = parent;
+    ngx_http_sysguard_conf_t *conf = child;
+
+    ngx_conf_merge_value(conf->enable, prev->enable, 0);
+    ngx_conf_merge_str_value(conf->load_action, prev->load_action, "");
+    ngx_conf_merge_str_value(conf->swap_action, prev->swap_action, "");
+    ngx_conf_merge_value(conf->load, prev->load, -1);
+    ngx_conf_merge_value(conf->swap, prev->swap, -1);
+    ngx_conf_merge_value(conf->interval, prev->interval, 1);
+    ngx_conf_merge_uint_value(conf->log_level, prev->log_level, NGX_LOG_ERR);
+
+    return NGX_CONF_OK;
+}
+
+static char *
+ngx_http_sysguard_load(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_sysguard_conf_t *glcf = conf;
+
+    ngx_str_t  *value;
+    ngx_uint_t  i;
+
+    value = cf->args->elts;
+    i = 1;
+
+    if (ngx_strncmp(value[i].data, "load=", 5) == 0) {
+
+        if (glcf->load != NGX_CONF_UNSET) {
+            return "is duplicate";
+        }
+
+        if (value[i].len == 5) {
+            goto invalid;
+        }
+
+        glcf->load = ngx_atofp(value[i].data + 5, value[i].len - 5, 3);
+        if (glcf->load == NGX_ERROR) {
+            goto invalid;
+        }
+
+        if (cf->args->nelts == 2) {
+            return NGX_CONF_OK;
+        }
+
+        i++;
+
+        if (ngx_strncmp(value[i].data, "action=", 7) != 0) {
+            goto invalid;
+        }
+
+        if (value[i].len == 7) {
+            goto invalid;
+        }
+
+        if (value[i].data[7] != '/' && value[i].data[7] != '@') {
+            goto invalid;
+        }
+
+        glcf->load_action.data = value[i].data + 7;
+        glcf->load_action.len = value[i].len - 7;
+
+        return NGX_CONF_OK;
+    }
+
+invalid:
+
+    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                       "invalid parameter \"%V\"", &value[i]);
+
+    return NGX_CONF_ERROR;
+}
+
+
+static char *
+ngx_http_sysguard_mem(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_sysguard_conf_t *glcf = conf;
+
+    ngx_str_t  *value;
+    ngx_uint_t  i;
+
+    value = cf->args->elts;
+    i = 1;
+
+    if (ngx_strncmp(value[i].data, "swapratio=", 10) == 0) {
+
+        if (glcf->swap != NGX_CONF_UNSET) {
+            return "is duplicate";
+        }
+
+        if (value[i].data[value[i].len - 1] != '%') {
+            goto invalid;
+        }
+
+        glcf->swap = ngx_atofp(value[i].data + 10, value[i].len - 11, 2);
+        if (glcf->swap == NGX_ERROR) {
+            goto invalid;
+        }
+
+        if (cf->args->nelts == 2) {
+            return NGX_CONF_OK;
+        }
+
+        i++;
+
+        if (ngx_strncmp(value[i].data, "action=", 7) != 0) {
+            goto invalid;
+        }
+
+        if (value[i].len == 7) {
+            goto invalid;
+        }
+
+        if (value[i].data[7] != '/' && value[i].data[7] != '@') {
+            goto invalid;
+        }
+
+        glcf->swap_action.data = value[i].data + 7;
+        glcf->swap_action.len = value[i].len - 7;
+
+        return NGX_CONF_OK;
+    }
+
+invalid:
+
+    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                       "invalid parameter \"%V\"", &value[i]);
+
+    return NGX_CONF_ERROR;
+}
+
+
+static ngx_int_t
+ngx_http_sysguard_init(ngx_conf_t *cf)
+{
+    ngx_http_handler_pt        *h;
+    ngx_http_core_main_conf_t  *cmcf;
+
+    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
+
+    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers);
+    if (h == NULL) {
+        return NGX_ERROR;
+    }
+
+    *h = ngx_http_sysguard_handler;
+
+    return NGX_OK;
+}
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index b6ff898..b00e4c0 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -486,6 +486,7 @@ struct ngx_http_request_s {
      */
     unsigned                          limit_conn_set:1;
     unsigned                          limit_req_set:1;
+    unsigned                          sysguard_set:1;
 
 #if 0
     unsigned                          cacheable:1;
diff --git a/src/os/unix/ngx_sysinfo.c b/src/os/unix/ngx_sysinfo.c
new file mode 100644
index 0000000..f1c9657
--- /dev/null
+++ b/src/os/unix/ngx_sysinfo.c
@@ -0,0 +1,80 @@
+
+/*
+ * Copyright (C) 2010-2012 Alibaba Group Holding Limited
+ */
+
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+
+#if (NGX_HAVE_SYSINFO)
+#include <sys/sysinfo.h>
+#endif
+
+
+ngx_int_t
+ngx_getloadavg(ngx_int_t avg[], ngx_int_t nelem, ngx_log_t *log)
+{
+#if (NGX_HAVE_GETLOADAVG)
+    double      loadavg[3];
+    ngx_int_t   i;
+
+    if (getloadavg(loadavg, nelem) == -1) {
+        return NGX_ERROR;
+    }
+
+    for (i = 0; i < nelem; i ++) {
+        avg[i] = loadavg[i] * 1000;
+    }
+
+    return NGX_OK;
+
+#elif (NGX_HAVE_SYSINFO)
+
+    struct sysinfo s;
+    ngx_int_t   i;
+
+    if (sysinfo(&s)) {
+        return NGX_ERROR;
+    }
+
+    for (i = 0; i < nelem; i ++) {
+        avg[i] = s.loads[i] * 1000 / 65536;
+    }
+
+    return NGX_OK;
+
+#else
+
+    ngx_log_error(NGX_LOG_EMERG, log, 0,
+                  "getloadavg is unsurpported under current os");
+
+    return NGX_ERROR;
+#endif
+}
+
+
+ngx_int_t
+ngx_getmeminfo(ngx_meminfo_t *meminfo, ngx_log_t *log)
+{
+#if (NGX_HAVE_SYSINFO)
+    struct sysinfo s;
+
+    if (sysinfo(&s)) {
+        return NGX_ERROR;
+    }
+
+    meminfo->totalram = s.totalram;
+    meminfo->freeram = s.freeram;
+    meminfo->sharedram = s.sharedram;
+    meminfo->bufferram = s.bufferram;
+    meminfo->totalswap = s.totalswap;
+    meminfo->freeswap = s.freeswap;
+
+    return NGX_OK;
+#else
+    ngx_log_error(NGX_LOG_EMERG, log, 0,
+                  "getmeminfo is unsurpported under current os");
+    return NGX_ERROR;
+#endif
+}
diff --git a/src/os/unix/ngx_sysinfo.h b/src/os/unix/ngx_sysinfo.h
new file mode 100644
index 0000000..5f021d8
--- /dev/null
+++ b/src/os/unix/ngx_sysinfo.h
@@ -0,0 +1,28 @@
+
+/*
+ * Copyright (C) 2010-2012 Alibaba Group Holding Limited
+ */
+
+
+#ifndef _NGX_SYSINFO_H_INCLUDED_
+#define _NGX_SYSINFO_H_INCLUDED_
+
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+
+
+typedef struct {
+    size_t totalram;
+    size_t freeram;
+    size_t sharedram;
+    size_t bufferram;
+    size_t totalswap;
+    size_t freeswap;
+} ngx_meminfo_t;
+
+
+ngx_int_t ngx_getloadavg(ngx_int_t avg[], ngx_int_t nelem, ngx_log_t *log);
+ngx_int_t ngx_getmeminfo(ngx_meminfo_t *meminfo, ngx_log_t *log);
+
+#endif /* _NGX_SYSINFO_H_INCLUDED_ */
